import React, { useState } from 'react';
import { Search, Plus, LogOut, User, Eye, EyeOff, Copy, Save, Share2, Send, Mail, Twitter, Facebook } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import '../styles/Dashboard.css';

// Composant ShareMenu
const ShareMenu = ({ item, onClose }) => {
  const shareUrl = encodeURIComponent(window.location.href);
  const shareText = encodeURIComponent(`Informations de connexion pour ${item.site}`);

  const shareOptions = [
    {
      name: 'WhatsApp',
      icon: <Send size={16} />,
      url: `https://wa.me/?text=${shareText}%20${shareUrl}`,
      color: '#25D366',
    },
    {
      name: 'X (Twitter)',
      icon: <Twitter size={16} />,
      url: `https://twitter.com/intent/tweet?url=${shareUrl}&text=${shareText}`,
      color: '#1DA1F2',
    },
    {
      name: 'Facebook',
      icon: <Facebook size={16} />,
      url: `https://www.facebook.com/sharer/sharer.php?u=${shareUrl}`,
      color: '#1877F2',
    },
    {
      name: 'Email',
      icon: <Mail size={16} />,
      url: `mailto:?subject=${shareText}&body=${shareUrl}`,
      color: '#EA4335',
    },
  ];

  const handleShare = (url) => {
    window.open(url, '_blank', 'width=600,height=400');
    onClose();
  };

  return (
    <div className="share-menu">
      {shareOptions.map((option) => (
        <button
          key={option.name}
          className="share-button"
          onClick={() => handleShare(option.url)}
          style={{ color: option.color }}
        >
          {option.icon}
          {option.name}
        </button>
      ))}
    </div>
  );
};

// Composant principal Dashboard
const Dashboard = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [gridItems, setGridItems] = useState([
    { id: 1, title: 'Item 1', username: '478976967', password: 'mdp1', site: '1xbet.com' },
    { id: 2, title: 'Item 2', username: 'user2', password: 'mdp2', site: 'example.com' },
  ]);
  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  const openItemModal = (item) => {
    setSelectedItem({ ...item });
    setIsModalOpen(true);
    setIsEditing(false);
  };

  const copyToClipboard = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      alert('Copié dans le presse-papier !');
    } catch (err) {
      console.error('Erreur lors de la copie :', err);
    }
  };

  const handleSave = (editedItem) => {
    setGridItems((prevItems) =>
      prevItems.map((item) => (item.id === editedItem.id ? editedItem : item))
    );
    setIsEditing(false);
  };

  const handleDelete = () => {
    setGridItems((prevItems) =>
      prevItems.filter((item) => item.id !== selectedItem.id)
    );
    setIsModalOpen(false);
    setSelectedItem(null);
  };

  const CredentialModal = ({ item, onClose }) => {
    const [editedItem, setEditedItem] = useState(item);
    const [showShareMenu, setShowShareMenu] = useState(false);

    const handleSaveChanges = () => {
      handleSave(editedItem); // Sauvegarde les modifications
      setIsModalOpen(false); // Ferme la modal
      setSelectedItem(null); // Réinitialise l'état sélectionné
    };

    return (
      <div className="modal-overlay" onClick={onClose}>
        <div className="modal-content" onClick={(e) => e.stopPropagation()}>
          <div className="credential-form">
            <div className="form-group">
              <label>Nom d'utilisateur</label>
              <div className="input-group">
                <input
                  type="text"
                  value={editedItem.username}
                  readOnly={!isEditing}
                  className="form-input"
                  onChange={(e) => setEditedItem({ ...editedItem, username: e.target.value })}
                />
                <button className="icon-button" onClick={() => copyToClipboard(editedItem.username)}>
                  <Copy size={16} />
                </button>
              </div>
            </div>

            <div className="form-group">
              <label>Mot de passe</label>
              <div className="input-group">
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={editedItem.password}
                  readOnly={!isEditing}
                  className="form-input"
                  onChange={(e) => setEditedItem({ ...editedItem, password: e.target.value })}
                />
                <button
                  className="icon-button"
                  style={{ right: '40px' }}
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                </button>
                <button
                  className="icon-button"
                  onClick={() => copyToClipboard(editedItem.password)}
                >
                  <Copy size={16} />
                </button>
              </div>
            </div>

            <div className="form-group">
              <label>Sites</label>
              <div className="input-group">
                <input
                  type="text"
                  value={editedItem.site}
                  readOnly={!isEditing}
                  className="form-input"
                  onChange={(e) => setEditedItem({ ...editedItem, site: e.target.value })}
                />
              </div>
            </div>

            <div className="form-group">
              <label>Remarque</label>
              <div className="input-group">
                <input
                  type="text"
                  value={editedItem.note || ''}
                  placeholder="Aucune note ajoutée"
                  className="form-input"
                  readOnly={!isEditing}
                  onChange={(e) => setEditedItem({ ...editedItem, note: e.target.value })}
                />
              </div>
            </div>

            <div className="button-group">
              <div className="left-buttons">
                {isEditing ? (
                  <button className="action-button" onClick={handleSaveChanges}>
                    <Save size={16} />
                    Sauvegarder
                  </button>
                ) : (
                  <button className="action-button" onClick={() => setIsEditing(true)}>
                    Modifier
                  </button>
                )}
                <button className="action-button delete" onClick={handleDelete}>
                  Supprimer
                </button>
              </div>
              <div style={{ position: 'relative' }}>
                <button
                  className="action-button share"
                  onClick={() => setShowShareMenu(!showShareMenu)}
                >
                  <Share2 size={16} />
                  Partager
                </button>
                {showShareMenu && (
                  <ShareMenu item={editedItem} onClose={() => setShowShareMenu(false)} />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <div className="search-container">
          <input
            type="text"
            className="search-input"
            placeholder="Rechercher..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <div className="actions-container">
          <button className="add-button">
            <Plus size={20} />
            Ajouter
          </button>
          <div className="profile-menu-container">
            <button
              className="profile-button"
              onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
            >
              <img
                src="https://ui-avatars.com/api/?name=User&background=random"
                alt="Profile"
                className="avatar-image"
              />
            </button>
            {isProfileMenuOpen && (
              <div className="profile-dropdown">
                <button className="profile-option" onClick={() => navigate('/profile')}>
                  <User size={16} />
                  Profile
                </button>
                <button className="profile-option" onClick={handleLogout}>
                  <LogOut size={16} />
                  Déconnexion
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
      <div className="grid-container">
        {gridItems.map((item) => (
          <div key={item.id} className="grid-item" onClick={() => openItemModal(item)}>
            <h3 className="grid-item-title">{item.site}</h3>
          </div>
        ))}
      </div>
      {isModalOpen && selectedItem && (
        <CredentialModal
          item={selectedItem}
          onClose={() => {
            setIsModalOpen(false);
            setSelectedItem(null);
            setIsEditing(false);
          }}
        />
      )}
    </div>
  );
};

export default Dashboard;
